import{_ as n,o as s,c as a,b as t}from"./app--sV_VTfN.js";const p={},e=t(`<h1 id="es6-新增" tabindex="-1"><a class="header-anchor" href="#es6-新增"><span>ES6 新增</span></a></h1><h2 id="新增类型和变量声明关键字" tabindex="-1"><a class="header-anchor" href="#新增类型和变量声明关键字"><span>新增类型和变量声明关键字</span></a></h2><h3 id="symbol-类型" tabindex="-1"><a class="header-anchor" href="#symbol-类型"><span>symbol 类型</span></a></h3><p>ES6 新增了一种原始数据类型：symbol，表示独一无二的值，即每个 symbol 类型的值都不相同</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sy <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sy1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tepeof sy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &#39;symbol&#39;</span>
sy <span class="token operator">==</span> sy1<span class="token punctuation">;</span>   <span class="token comment">//false</span>
<span class="token keyword">var</span> sy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// error : Symbol is not a constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="let-和-const" tabindex="-1"><a class="header-anchor" href="#let-和-const"><span>let 和 const</span></a></h3><p>ES6 新增了两个声明变量的关键字：let 和 const。</p><p>let 和 const 关键字声明的变量只会在它们所处的代码块内起作用。</p><p>let 和 const 声明变量不会在预编译过程中有提升行为，全局声明也不会变成 window 的属性。</p><p>let 和 const 声明的变量具有“暂时性死区”特性，即在使用了该关键字的块级作用域中，其内部使用 let 和 const 关键字 声明的变量与外部作用域中的变量相互隔绝，互不影响。即使是同名变量。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error Cannot access &#39;a&#39; before initialization</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>const 用来声明一个常量，声明时必须赋值，且一旦声明就不能改变（原始值不可改，引用值可改）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ren&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//error</span>
obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> male<span class="token punctuation">;</span>
consol<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{name:&#39;ren&#39;,age:12;sex:&#39;male&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值"><span>解构赋值</span></a></h3><p>解构赋值是对赋值运算符的扩展。它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1,2,3</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1,undefined,3</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,3</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,[2,3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上所有可枚举（iterable）的对象都可以使用解构赋值，例如数组，字符串对象，以及 ES6 新增的 Map 和 Set 类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;</span>
　　对象的解构赋值和数组类似，不过左边的变量名需要使用对象的属性名，并且用大括号<span class="token punctuation">{</span><span class="token punctuation">}</span>而非中括号<span class="token punctuation">[</span><span class="token punctuation">]</span>：

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ren&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#39;ren&#39; 12 &#39;male&#39;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span>myName<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span>myAge<span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span>mySex<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token comment">//自定义变量名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span>myAge<span class="token punctuation">,</span>mySex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#39;ren&#39; 12 &#39;male&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新的对象和方法" tabindex="-1"><a class="header-anchor" href="#新的对象和方法"><span>新的对象和方法</span></a></h2><h3 id="map-和-set" tabindex="-1"><a class="header-anchor" href="#map-和-set"><span>Map 和 Set</span></a></h3><p>Map 对象用于保存键值对，任何值JavaScript支持的值都可以作为一个键或者一个值。</p><ul><li>和objec的区别是object的键只能是字符串或 ES6 的 symbol值，而 Map 可以是任何值。</li><li>Map对象有一个size属性，存储了键值对的个数，而object对象没有类似属性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ren&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个Map实例，传入默认值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{&#39;name&#39;=&gt;&#39;ren&#39;,&#39;age&#39;=&gt;12}</span>
myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加map键值对</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{&#39;name&#39;=&gt;&#39;ren&#39;,&#39;age&#39;=&gt;12,&#39;sex&#39;=&gt;&#39;male&#39;}</span>
myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#39;ren&#39; 查询key对应的值</span>
myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true 键值对是否存在</span>
myMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 移除 Map 对象中指定的键值对，成功返回true</span>
myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","es6.html.vue"]]),r=JSON.parse('{"path":"/web/javascript/es6.html","title":"ES6新增","lang":"zh-CN","frontmatter":{"title":"ES6新增","description":"ES6 新增 新增类型和变量声明关键字 symbol 类型 ES6 新增了一种原始数据类型：symbol，表示独一无二的值，即每个 symbol 类型的值都不相同 let 和 const ES6 新增了两个声明变量的关键字：let 和 const。 let 和 const 关键字声明的变量只会在它们所处的代码块内起作用。 let 和 const 声明变...","head":[["meta",{"property":"og:url","content":"https://jiazhilei.github.io/web/javascript/es6.html"}],["meta",{"property":"og:site_name","content":"你好， VuePress ！"}],["meta",{"property":"og:title","content":"ES6新增"}],["meta",{"property":"og:description","content":"ES6 新增 新增类型和变量声明关键字 symbol 类型 ES6 新增了一种原始数据类型：symbol，表示独一无二的值，即每个 symbol 类型的值都不相同 let 和 const ES6 新增了两个声明变量的关键字：let 和 const。 let 和 const 关键字声明的变量只会在它们所处的代码块内起作用。 let 和 const 声明变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-27T16:22:08.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-27T16:22:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6新增\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-27T16:22:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"新增类型和变量声明关键字","slug":"新增类型和变量声明关键字","link":"#新增类型和变量声明关键字","children":[{"level":3,"title":"symbol 类型","slug":"symbol-类型","link":"#symbol-类型","children":[]},{"level":3,"title":"let 和 const","slug":"let-和-const","link":"#let-和-const","children":[]},{"level":3,"title":"解构赋值","slug":"解构赋值","link":"#解构赋值","children":[]}]},{"level":2,"title":"新的对象和方法","slug":"新的对象和方法","link":"#新的对象和方法","children":[{"level":3,"title":"Map 和 Set","slug":"map-和-set","link":"#map-和-set","children":[]}]}],"git":{"updatedTime":1716826928000,"contributors":[{"name":"jiazhilei","email":"jiazhilei2021@163.com","commits":2}]},"autoDesc":true,"filePathRelative":"web/javascript/es6.md"}');export{k as comp,r as data};
